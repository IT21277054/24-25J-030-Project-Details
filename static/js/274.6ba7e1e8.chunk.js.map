{"version":3,"file":"static/js/274.6ba7e1e8.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\n  background: ${(p) => p.color || \"#102D4D\"};\n  color: ${(p) => (p.color ? \"#102D4D\" : \"#fff\")};\n  font-size: 1rem;\n  font-weight: 700;\n  width: 100%;\n  border: 1px solid #edf3f5;\n  border-radius: 4px;\n  padding: 13px 0;\n  cursor: pointer;\n  margin-top: 0.625rem;\n  max-width: 180px;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: #fff;\n    border: 1px solid #4072AF;\n    background-color: #4072AF;\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\n  <StyledButton color={color} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import { useState } from \"react\";\nimport { notification } from \"antd\";\n\ninterface IValues {\n  name: string;\n  email: string;\n  message: string;\n}\n\nconst initialValues: IValues = {\n  name: \"\",\n  email: \"\",\n  message: \"\",\n};\n\nexport const useForm = (validate: { (values: IValues): IValues }) => {\n  const [formState, setFormState] = useState<{\n    values: IValues;\n    errors: IValues;\n  }>({\n    values: { ...initialValues },\n    errors: { ...initialValues },\n  });\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const values = formState.values;\n    const errors = validate(values);\n    setFormState((prevState) => ({ ...prevState, errors }));\n\n    if (Object.values(errors).some((error) => error !== \"\")) {\n      return; \n    }\n\n    const url = \"\";\n\n    try {\n      // const response = await fetch(url, {\n      //   method: \"POST\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //   },\n      //   body: JSON.stringify(values),\n      // });\n\n      // if (!response.ok) {\n      //   notification[\"error\"]({\n      //     message: \"Error\",\n      //     description:\n      //       \"There was an error sending your message, please try again later.\",\n      //   });\n      // } else {\n        (event.target as HTMLFormElement).reset();\n        setFormState({\n          values: { ...initialValues },\n          errors: { ...initialValues },\n        });\n\n        notification[\"success\"]({\n          message: \"Success\",\n          description: \"Your message has been sent!\",\n        });\n      \n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: \"Failed to submit form. Please try again later.\",\n      });\n    }\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    const { name, value } = event.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: \"\",\n      },\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values: formState.values,\n    errors: formState.errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import { withTranslation, TFunction } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: TFunction;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n  color:#333\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n  color:#333\n`;\n\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\n\nexport const Input = styled.input`\n  padding: 0.75rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  width: 100%;\n  font-size: 1rem;\n  color: #333;  // Change text color here (dark gray)\n  background-color: #fff;  // Ensure background is white or desired color\n  \n  &:focus {\n    outline: none;\n    border-color: #4f8a8b;  // Focus border color\n  }\n`;\n\nexport const ContactContainer = styled(\"div\")`\n  padding-bottom: 5rem;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\nimport emailjs from \"emailjs-com\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type as keyof typeof errors];\n    return <Span>{ErrorMessage}</Span>;\n  };\n\n  const sendEmail = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();  \n    emailjs\n      .send(\n        process.env.REACT_APP_EMAILJS_SERVICE_ID || \"\",\n        process.env.REACT_APP_EMAILJS_TEMPLATE_ID || \"\",\n        {\n          name: values.name,\n          email: values.email,\n          message: values.message,\n        },\n         process.env.REACT_APP_EMAILJS_USER_ID || \"\"\n      )\n      .then(\n        (result) => {\n          console.log(\"Email sent successfully:\", result.text);\n        },\n        (error) => {\n          console.error(\"Error sending email:\", error.text);\n        }\n      );\n  };\n\n \n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    handleSubmit(e);\n    sendEmail(e);\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\" triggerOnce>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\" triggerOnce>\n            <FormGroup autoComplete=\"off\" onSubmit={onSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","children","onClick","_jsx","initialValues","name","email","message","validate","values","errors","test","withTranslation","title","content","t","_jsxs","Container","TextWrapper","Content","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","placeholder","onChange","htmlFor","id","ContactContainer","input","FormGroup","Span","_templateObject4","ButtonContainer","_templateObject5","_useForm","_useState","useState","_objectSpread","_useState2","_slicedToArray","formState","setFormState","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","prevState","Object","some","error","abrupt","target","reset","notification","description","stop","_x","apply","arguments","handleChange","persist","_event$target","value","_defineProperty","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","e","emailjs","process","then","result","console","log","text","sendEmail","span","Input","TextArea"],"sourceRoot":""}