{"version":3,"file":"static/js/610.e1f57e5d.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","components/CardContentBlock/index.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import { useState, useEffect } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { Fade, Zoom } from \"react-awesome-reveal\";\r\nimport { Row, Col } from \"antd\";\r\nimport { withTranslation, TFunction } from \"react-i18next\";\r\nimport { PngIconDoc, SvgIcon } from \"../../common/SvgIcon\";\r\nimport {\r\n  ContentSection,\r\n  CardWrapper,\r\n  CardTitleWrapper,\r\n  CardTitle,\r\n  CardText,\r\n  CardButton,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\ninterface CardContentBlockProps {\r\n  id: string;\r\n  title: string;\r\n  cards: Array<{\r\n    title: string;\r\n    text: string;\r\n    icon: string;\r\n    button: {\r\n      title: string;\r\n      url: string;\r\n    };\r\n  }>;\r\n  t: TFunction;\r\n  direction: \"left\" | \"right\";\r\n}\r\n\r\nconst CardContentBlock = ({\r\n  title,\r\n  cards,\r\n  t,\r\n  direction,\r\n  id,\r\n}: CardContentBlockProps) => {\r\n  const { ref, inView } = useInView({\r\n    triggerOnce: true,\r\n    threshold: 0.1,\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"In view:\", inView);\r\n  }, [inView]);\r\n\r\n  return (\r\n    <ContentSection ref={ref} id={id}>\r\n      <Zoom duration={1000} delay={300} triggerOnce>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <h2>{t(title)}</h2>\r\n          <Row\r\n            gutter={[16, 16]}\r\n            justify=\"center\" // Centering columns inside the row\r\n            style={{ maxWidth: \"1200px\", width: \"100%\" }} // Optional: to limit row width\r\n          >\r\n            {cards.map((card, index) => (\r\n              <Col key={index} xs={24} sm={12} md={8}>\r\n                <CardWrapper\r\n                  width=\"350px\"\r\n                  height=\"400px\"\r\n                  style={{\r\n                    animation: inView ? \"zoomIn 0.5s ease-in-out\" : \"none\",\r\n                    opacity: inView ? 1 : 0,\r\n                  }}\r\n                >\r\n                  <CardTitleWrapper>\r\n                    <CardTitle>{t(card.title)}</CardTitle>\r\n                    <PngIconDoc src={card.icon} width=\"80px\" height=\"80px\" />\r\n                  </CardTitleWrapper>\r\n                  <CardText>{t(card.text)}</CardText>\r\n                  <ButtonWrapper>\r\n                    <CardButton href={card.button.url}>\r\n                      {t(card.button.title)}\r\n                    </CardButton>\r\n                  </ButtonWrapper>\r\n                </CardWrapper>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </div>\r\n      </Zoom>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(CardContentBlock);\r\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","withTranslation","_ref","title","cards","t","direction","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","useEffect","console","log","_jsx","ContentSection","children","Zoom","duration","_jsxs","style","display","flexDirection","alignItems","Row","gutter","justify","maxWidth","width","card","index","Col","xs","sm","md","CardWrapper","height","animation","opacity","CardTitleWrapper","CardTitle","PngIconDoc","src","icon","CardText","text","ButtonWrapper","CardButton","href","button","url"],"sourceRoot":""}