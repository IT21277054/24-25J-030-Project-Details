{"version":3,"file":"static/js/17.51e31681.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled(\"button\")<{ color?: string }>`\r\n  background: ${(p) => p.color || \"#102D4D\"};\r\n  color: ${(p) => (p.color ? \"#102D4D\" : \"#fff\")};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: 1px solid #edf3f5;\r\n  border-radius: 4px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 0.625rem;\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    color: #fff;\r\n    border: 1px solid #4072AF;\r\n    background-color: #4072AF;\r\n  }\r\n`;\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n","import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    if (Object.values(errors).some((error) => error !== \"\")) {\r\n      return; \r\n    }\r\n\r\n    const url = \"\";\r\n\r\n    try {\r\n      // const response = await fetch(url, {\r\n      //   method: \"POST\",\r\n      //   headers: {\r\n      //     \"Content-Type\": \"application/json\",\r\n      //   },\r\n      //   body: JSON.stringify(values),\r\n      // });\r\n\r\n      // if (!response.ok) {\r\n      //   notification[\"error\"]({\r\n      //     message: \"Error\",\r\n      //     description:\r\n      //       \"There was an error sending your message, please try again later.\",\r\n      //   });\r\n      // } else {\r\n        (event.target as HTMLFormElement).reset();\r\n        setFormState({\r\n          values: { ...initialValues },\r\n          errors: { ...initialValues },\r\n        });\r\n\r\n        notification[\"success\"]({\r\n          message: \"Success\",\r\n          description: \"Your message has been sent!\",\r\n        });\r\n      \r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n  color:#333\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n  color:#333\r\n`;\r\n\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\n\r\nexport const Input = styled.input`\r\n  padding: 0.75rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  color: #333;  // Change text color here (dark gray)\r\n  background-color: #fff;  // Ensure background is white or desired color\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    border-color: #4f8a8b;  // Focus border color\r\n  }\r\n`;\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding-bottom: 5rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  const sendEmail = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();  \r\n    emailjs\r\n      .send(\r\n        process.env.REACT_APP_EMAILJS_SERVICE_ID || \"\",\r\n        process.env.REACT_APP_EMAILJS_TEMPLATE_ID || \"\",\r\n        {\r\n          name: values.name,\r\n          email: values.email,\r\n          message: values.message,\r\n        },\r\n         process.env.REACT_APP_EMAILJS_USER_ID || \"\"\r\n      )\r\n      .then(\r\n        (result) => {\r\n          console.log(\"Email sent successfully:\", result.text);\r\n        },\r\n        (error) => {\r\n          console.error(\"Error sending email:\", error.text);\r\n        }\r\n      );\r\n  };\r\n\r\n \r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    handleSubmit(e);\r\n    sendEmail(e);\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={onSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","children","onClick","_jsx","initialValues","name","email","message","validate","values","errors","test","withTranslation","title","content","t","_jsxs","Container","TextWrapper","Content","StyledInput","_templateObject2","StyledContainer","StyledTextArea","Label","_templateObject3","placeholder","onChange","htmlFor","id","input","ContactContainer","FormGroup","Span","_templateObject4","ButtonContainer","_templateObject5","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","some","error","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","e","emailjs","process","then","result","console","log","text","sendEmail","span","Input","TextArea"],"sourceRoot":""}